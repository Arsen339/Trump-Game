#Adding modules
import pygame
import random
import math
pygame.init()

#Setting the display
win =pygame.display.set_mode((500, 500))
pygame.display.set_caption("Cubes game")

#constants 
clock = pygame.time.Clock()

#player's size and speed
width = 60
height = 71



animCount = 0


#Maximum allowed bullets and enemies
MaxBullet = 2
MaxEnemies = 5

#Uploading pictures in array
walkRight=[pygame.image.load("pygame_right_1.png"), pygame.image.load("pygame_right_2.png"),
pygame.image.load("pygame_right_3.png"), pygame.image.load("pygame_right_4.png"),
pygame.image.load("pygame_right_5.png"), pygame.image.load("pygame_right_6.png")]

walkLeft=[pygame.image.load("pygame_left_1.png"), pygame.image.load("pygame_left_2.png"),
pygame.image.load("pygame_left_3.png"), pygame.image.load("pygame_left_4.png"),
pygame.image.load("pygame_left_5.png"), pygame.image.load("pygame_left_6.png")]

playerStand = pygame.image.load("pygame_idle.png")

bg = pygame.image.load("bg.jpg")

#arrays for bullets and enemies
bullets = []
dangers = []

#class for bullets
class snaryad():
    def __init__(self, x, y, radius, color, facing):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.facing = facing
        self.vel = 8*facing
    #drawing bullets in window
    def draw(self, win):
        pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)


#class for enemies
class enemy():
    def __init__(self, x, y, radius, speed, color, facing):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.speed = speed
        self.facing = facing
    #drawing enemy in window
    def DrawEnemy(self, win):
        pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)

#Class for gamer
class Gamer():
    def __init__(self,XPos,YPos, LeftFacing, RightFacing, lastMove, GamerSpeed, InAirNow, HeightCount):
        
        self.XPos = XPos
        self.YPos = YPos
        self.LeftFacing = LeftFacing
        self.Rightfacing = RightFacing
        self.lastMove = lastMove
        self.GamerSpeed = GamerSpeed
        self.InAirNow = InAirNow
        self.HeightCount = HeightCount
#Start values
Trump=Gamer(50, 425, False, False, "right", 7, False, 10)



#Update window fun
def drawWindow():
    #WindowSet
    win.blit(bg, (0, 0))
    #pygame.draw.rect(win, (0,0,255), (x, y, width, height))- draws rectangle instead of player
    #win.fill((0,0,0))-Paint the screen black
    #Global var used in any part of code
    global animCount
    #Every sprite played in 5 shots. 30 shots aset as maximal
    if animCount + 1 > 30:
        animCount = 0
    if Trump.LeftFacing:
        win.blit(walkLeft[animCount // 5], (Trump.XPos, Trump.YPos))
        animCount += 1
    elif Trump.RightFacing:
        win.blit(walkRight[animCount // 5], (Trump.XPos, Trump.YPos))
        animCount += 1
    else:
        win.blit(playerStand, (Trump.XPos, Trump.YPos))
    for bullet in bullets:
        bullet.draw(win)
    for danger in dangers:
        danger.DrawEnemy(win)

    pygame.display.update()
    
    
 #Function creates and deletes anemies   
def EnemySetting():
    global dangers
    global bullets
    ChoiceAbility = [0,1,2,3,4,5,6,7,8,9,10]
    EnemyRadius = random.choice([35, 30])
    EnemySpeed = random.choice([1,2,3])
    # adds an enemie
    if random.choice(ChoiceAbility) == 9 and len(dangers) < MaxEnemies:
        dangers.append(enemy(0, 500-EnemyRadius, EnemyRadius, EnemySpeed, (255,100,180), 1))
    elif random.choice(ChoiceAbility) == 10 and len(dangers) < MaxEnemies:
        dangers.append(enemy(500, 500-EnemyRadius, EnemyRadius, - EnemySpeed, (0,255,0), -1))
    #moving and deleting enemies
    if len(dangers) >=1:  
        for danger in dangers: 
            if danger.x < 500 and danger.facing == 1:
                danger.x += danger.speed
            elif danger.x > 0 and danger.facing == -1:
                danger.x += danger.speed
            else:
                dangers.pop(dangers.index(danger))
    # killing enemies            
    if len(bullets) >=1:           
        for bullet in bullets:
            for danger in dangers:
                if math.fabs(bullet.x-danger.x) <5:
                    dangers.pop(dangers.index(danger))
                    #bullets.pop(bullets.index(bullet))
        

def PlayerMoving():
    global animCount
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and Trump.XPos > 5:
        Trump.XPos -= Trump.GamerSpeed
        Trump.LeftFacing = True
        Trump.RightFacing = False
        Trump.lastMove = "left"
    elif keys[pygame.K_RIGHT] and Trump.XPos < 500-5-width:
        Trump.XPos += Trump.GamerSpeed
        Trump.LeftFacing = False
        Trump.RightFacing = True
        Trump.lastMove = "right"
    else:
        Trump.LeftFacing = False
        Trump.RightFacing = False
        animCount = 0


def PlayerJumping():
    keys = pygame.key.get_pressed()
    if not(Trump.InAirNow):
       
        if keys[pygame.K_SPACE]:
            Trump.InAirNow = True 
    else:
        
        if Trump.HeightCount >=-10:
            if Trump.HeightCount < 0:
                 Trump.YPos += (Trump.HeightCount ** 2) / 2
            else:
                Trump.YPos -= (Trump.HeightCount ** 2) / 2
            Trump.HeightCount -= 1 
        else:
            Trump.InAirNow = False
            Trump.HeightCount = 10
    
def BulletMove():
    global bullets
    for bullet in bullets:
        if bullet.x < 500 and bullet.x > 0:
            bullet.x += bullet.vel
        else:
            bullets.pop(bullets.index(bullet))
    keys = pygame.key.get_pressed()
    if keys[pygame.K_f]:
        if Trump.lastMove == "right":
            facing = 1
        else:
            facing = -1
        if len(bullets) < MaxBullet:
            bullets.append(snaryad(round(Trump.XPos + width // 2), round(Trump.YPos + height // 2), 5,(255,0,0), facing))







run  = True
while run:
    clock.tick(30)
    #Repeating in MS
    pygame.time.delay(50)
    #Out when close
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
    BulletMove()
    PlayerJumping()
    PlayerMoving()
    EnemySetting()
    drawWindow()
    

pygame.quit()









